version: '3'
services:

#  rabbitmq:
#    image: rabbitmq:management
#    ports:
#      - 5672:5672
#      - 15672:15672
#    networks:
#      - my-network

  # kafka:
  #   container_name: kafka
  #   image: spotify/kafka:latest
  #   ports:
  #    - 2181:2181
  #    - 9092:9092
  #   networks:
  #     - my-network

#  zipkin:
#    image: openzipkin/zipkin
#    ports:
#      - 9411:9411
#    networks:
#      - my-network

  redis:
    image: redis
    ports:
      - 6379:6379
    networks:
      - my-network

  ts-ui-dashboard:
    build: ts-ui-dashboard
    image: ts/ts-ui-dashboard
    restart: always
    ports:
      - 8080:8080
    networks:
      - my-network

  ts-auth-service:
    build:
      context: .
      dockerfile: ./ts-auth-service/Dockerfile
    image: ts/ts-auth-service
    restart: always
    ports:
      - 12340:12340
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-auth-mongo:
    image: mongo
    networks:
      - my-network

  ts-user-service:
    build:
      context: .
      dockerfile: ./ts-user-service/Dockerfile
    image: ts/ts-user-service
    restart: always
    ports:
      - 12342:12342
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-user-mongo:
    image: mongo
    networks:
      - my-network

  ts-verification-code-service:
    build:
      context: .
      dockerfile: ./ts-verification-code-service/Dockerfile
    image: ts/ts-verification-code-service
    restart: always
    ports:
      - 15678:15678
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network


  ts-account-mongo:
    image: mongo
    networks:
      - my-network

  ts-route-service:
    build:
      context: .
      dockerfile: ./ts-route-service/Dockerfile
    image: ts/ts-route-service
    restart: always
    ports:
      - 11178:11178
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-route-mongo:
    image: mongo
    networks:
      - my-network

  ts-contacts-service:
    build: 
      context: .
      dockerfile: ./ts-contacts-service/Dockerfile
    image: ts/ts-contacts-service
    restart: always
    ports:
      - 12347:12347
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-contacts-mongo:
    image: mongo
    networks:
      - my-network

  ts-order-service:
    build: 
      context: .
      dockerfile: ./ts-order-service/Dockerfile
    image: ts/ts-order-service
    restart: always
    ports:
      - 12031:12031
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-order-mongo:
    image: mongo
    networks:
      - my-network


  ts-order-other-service:
    build: 
      context: .
      dockerfile: ./ts-order-other-service/Dockerfile
    image: ts/ts-order-other-service
    restart: always
    ports:
      - 12032:12032
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-order-other-mongo:
    image: mongo
    networks:
      - my-network


  ts-config-service:
    build: 
      context: .
      dockerfile: ./ts-config-service/Dockerfile
    image: ts/ts-config-service
    restart: always
    ports:
      - 15679:15679
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-config-mongo:
    image: mongo
    networks:
      - my-network

  ts-station-service:
    build: 
      context: .
      dockerfile: ./ts-station-service/Dockerfile
    image: ts/ts-station-service
    restart: always
    ports:
      - 12345:12345
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-station-mongo:
    image: mongo
    networks:
      - my-network

  ts-train-service:
    build: 
      context: .
      dockerfile: ./ts-train-service/Dockerfile
    image: ts/ts-train-service
    restart: always
    ports:
      - 14567:14567
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-train-mongo:
    image: mongo
    networks:
      - my-network

  ts-travel-service:
    build: 
      context: .
      dockerfile: ./ts-travel-service/Dockerfile
    image: ts/ts-travel-service
    restart: always
    ports:
      - 12346:12346
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-travel-mongo:
    image: mongo
    networks:
      - my-network

  ts-travel2-service:
    build: 
      context: .
      dockerfile: ./ts-travel2-service/Dockerfile
    image: ts/ts-travel2-service
    restart: always
    ports:
      - 16346:16346
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-travel2-mongo:
    image: mongo
    networks:
      - my-network

  ts-preserve-service:
    build: 
      context: .
      dockerfile: ./ts-preserve-service/Dockerfile
    image: ts/ts-preserve-service
    restart: always
    ports:
      - 14568:14568
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-preserve-other-service:
    build: 
      context: .
      dockerfile: ./ts-preserve-other-service/Dockerfile
    image: ts/ts-preserve-other-service
    restart: always
    ports:
      - 14569:14569
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network


  ts-basic-service:
    build: 
      context: .
      dockerfile: ./ts-basic-service/Dockerfile
    image: ts/ts-basic-service
    restart: always
    ports:
      - 15680:15680
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-ticketinfo-service:
    build: 
      context: .
      dockerfile: ./ts-ticketinfo-service/Dockerfile
    image: ts/ts-ticketinfo-service
    restart: always
    ports:
      - 15681:15681
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network
        
  ts-price-service:
    build: 
      context: .
      dockerfile: ./ts-price-service/Dockerfile
    image: ts/ts-price-service
    restart: always
    ports:
      - 16579:16579
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-price-mongo:
    image: mongo
    networks:
      - my-network

  ts-notification-service:
    build: 
      context: .
      dockerfile: ./ts-notification-service/Dockerfile
    image: ts/ts-notification-service
    restart: always
    ports:
      - 17853:17853
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-security-service:
    build: 
      context: .
      dockerfile: ./ts-security-service/Dockerfile
    image: ts/ts-security-service
    restart: always
    ports:
      - 11188:11188
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-security-mongo:
    image: mongo
    networks:
      - my-network

  ts-inside-payment-service:
    build: 
      context: .
      dockerfile: ./ts-inside-payment-service/Dockerfile
    image: ts/ts-inside-payment-service
    restart: always
    ports:
      - 18673:18673
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-inside-payment-mongo:
    image: mongo
    networks:
      - my-network

  ts-execute-service:
    build: 
      context: .
      dockerfile: ./ts-execute-service/Dockerfile
    image: ts/ts-execute-service
    restart: always
    ports:
      - 12386:12386
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-payment-service:
    build: 
      context: .
      dockerfile: ./ts-payment-service/Dockerfile
    image: ts/ts-payment-service
    restart: always
    ports:
      - 19001:19001
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-payment-mongo:
    image: mongo
    networks:
      - my-network

  ts-rebook-service:
    build: 
      context: .
      dockerfile: ./ts-rebook-service/Dockerfile
    image: ts/ts-rebook-service
    restart: always
    ports:
      - 18886:18886
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-rebook-mongo:
    image: mongo
    networks:
      - my-network

  ts-cancel-service:
    build: 
      context: .
      dockerfile: ./ts-cancel-service/Dockerfile
    image: ts/ts-cancel-service
    restart: always
    ports:
      - 18885:18885
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-assurance-service:
    build: 
      context: .
      dockerfile: ./ts-assurance-service/Dockerfile
    image: ts/ts-assurance-service
    restart: always
    ports:
      - 18888:18888
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-assurance-mongo:
    image: mongo
    networks:
      - my-network

  ts-seat-service:
    build: 
      context: .
      dockerfile: ./ts-seat-service/Dockerfile
    image: ts/ts-seat-service
    restart: always
    ports:
      - 18898:18898
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-travel-plan-service:
    build: 
      context: .
      dockerfile: ./ts-travel-plan-service/Dockerfile
    image: ts/ts-travel-plan-service
    restart: always
    ports:
      - 14322:14322
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-ticket-office-service:
    build: ts-ticket-office-service
    image: ts/ts-ticket-office-service
    restart: always
    ports:
      - 16108:16108
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-ticket-office-mongo:
    image: mongo
    networks:
      - my-network

  ts-news-service:
    build: ts-news-service
    image: ts/ts-news-service
    restart: always
    ports:
      - 12862:12862
    networks:
      - my-network

  ts-news-mongo:
    image: mongo
    networks:
      - my-network

  ts-voucher-mysql:
    image: mysql
    expose:
      - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      networks:
        - my-network

  ts-voucher-service:
    build: ts-voucher-service
    image: ts/ts-voucher-service
    restart: always
    ports:
      - 16101:16101
    depends_on:
      - ts-voucher-mysql
    volumes:
      - /var/lib/mysql
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-food-map-service:
    build: 
      context: .
      dockerfile: ./ts-food-map-service/Dockerfile
    image: ts/ts-food-map-service
    restart: always
    ports:
      - 18855:18855
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-food-map-mongo:
    image: mongo
    networks:
      - my-network

  ts-route-plan-service:
    build: 
      context: .
      dockerfile: ./ts-route-plan-service/Dockerfile
    image: ts/ts-route-plan-service
    restart: always
    ports:
      - 14578:14578
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-food-service:
    build: 
      context: .
      dockerfile: ./ts-food-service/Dockerfile
    image: ts/ts-food-service
    restart: always
    ports:
      - 18856:18856
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-consign-service:
    build: 
      context: .
      dockerfile: ./ts-consign-service/Dockerfile
    image: ts/ts-consign-service
    restart: always
    ports:
      - 16111:16111
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-consign-mongo:
    image: mongo
    networks:
      - my-network

  ts-consign-price-service:
    build: 
      context: .
      dockerfile: ./ts-consign-price-service/Dockerfile
    image: ts/ts-consign-price-service
    restart: always
    ports:
      - 16110:16110
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-consign-price-mongo:
    image: mongo
    networks:
      - my-network

  ts-food-mongo:
    image: mongo
    networks:
      - my-network

  ts-admin-basic-info-service:
    build: 
      context: .
      dockerfile: ./ts-admin-basic-info-service/Dockerfile
    image: ts/ts-admin-basic-info-service
    restart: always
    ports:
      - 18767:18767
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-admin-order-service:
    build: 
      context: .
      dockerfile: ./ts-admin-order-service/Dockerfile
    image: ts/ts-admin-order-service
    restart: always
    ports:
      - 16112:16112
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    networks:
      - my-network

  ts-admin-route-service:
    build: 
      context: .
      dockerfile: ./ts-admin-route-service/Dockerfile
    image: ts/ts-admin-route-service
    restart: always
    ports:
      - 16113:16113
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - my-network

  ts-admin-travel-service:
    build: 
      context: .
      dockerfile: ./ts-admin-travel-service/Dockerfile
    image: ts/ts-admin-travel-service
    restart: always
    ports:
      - 16114:16114
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - my-network

  ts-admin-user-service:
    build: 
      context: .
      dockerfile: ./ts-admin-user-service/Dockerfile
    image: ts/ts-admin-user-service
    restart: always
    ports:
      - 16115:16115
    volumes:
      - "/home/fdse/zdh/stub/test:/home"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - my-network

  jaeger:
    image: jaegertracing/all-in-one:1.15
    ports:
      - 16686:16686
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - my-network


networks:
    my-network:
      # driver: overlay
      driver: bridge





